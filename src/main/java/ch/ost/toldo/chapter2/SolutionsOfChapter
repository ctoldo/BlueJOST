2.1
siehe naiverTicketautomat TicketautomatStarter

2.2
siehe naiverTicketautomat TicketautomatStarter

2.3
siehe naiverTicketautomat Ticketautomatstarter

2.4
Es wird der zu zahlende Betrag abgespeichert bei der Instanzierung
Dieser Wert wird wieder ausgegeben bei Ticket drucken, zusätzlich wird der einbezahlte Betrag wieder auf 0 gesetzt
Die Beträge, die einbezahlt werden addiert und zurück gegeben wenn gewünscht
Der einbezahlte Betrag hat aber keinen Einfluss auf den Ausdruck des Tickets.

2.5
Der einzige Unteschied ist die Zahl beim Cent-Betrag

2.6
public class Student(){}
public class Laborkurs(){}

2.7
falsche Reihenfolge führt dazu, dass Klasse nicht erkannt wird

2.8
public darf weggelassen werden, macht je nach Zugriffsschutz auch Sinn

2.9
class kann nicht weggelassen werden.

2.10
Datenfelder:  preis, bisherGezahlt, gesamtsumme
Konstruktor:  Ticketautomat(int ticketpreis)
Methoden:     gibPreis, gibBisherGezahltenBetrag, geldEinwerfen, ticketDrucken

2.11
Konstruktor hat als Rückgabewert sich selber -> nie void
Name muss dem, der Klasse entsprechen

2.12
zaehler ist ein int (Zahl)
sprecher ist ein Student
zentral ist ein Server

2.13
lebendig, tutor und spiel

2.14
Student, Server, Person, Spiel

2.15
andere Reihenfolgen sind nicht erlaubt.

2.16
Semikolon ist notwendig

2.17
private int status;

2.18
gehört zu Klasse "Student"

2.19
2 Parameter -> String und double

2.20
2x String

2.21
public Haustier(String seinName){
  name = seinName;
}

2.22
public Datum(String month, int day, int year){}

2.23
methodenNamen sind anders, andere Klassenvariable wird returned

2.24
"Wie viel habe ich bereits bezahlt?"

2.25
müsste nicht geändert werden, Name wird aber weniger Aussagekräftig mit dieser Änderung

2.26
siehe naiverTicketautomat -> Ticketautomat -> Methode gibGesamtsumme

2.27
keine Ahnung nicht ausgeführt, wahrschleinlich etwas wie missing return statement

2.28
gibPreis hat als Rückgabewert einen int, ticketDrucken hat keinen Rückgabewert also void

2.29
Nein, diese Methoden haben keinen Rückgabewert -> erkennbar am void im Kopf
Nicht nötig in diesem Fall für weitere Programmausführung

2.30
ausprobieren und allenfalls inspizieren

2.31
Konstruktor heisst immer gleich wie Klasse
Klasse eigentlich immer mit Nomen benannt

2.32
in naiverTicketautomat -> Ticketautomat -> setzePreis umgesetzt

2.33
punktestand += punkte;

2.34
ja, punktestand hat danach einen höheren Wert

2.35
preis -= betrag;

2.36
Meine Katze hat gruene Augen

2.37
in naiverTicketautomat -> Ticketautomat -> meldung

2.38
# preis Cent.

2.39
# preis Cent. wird ausgegeben.

2.40
Könnte sofern der Betrag zusätzlich statisch mitgegeben wird.

2.41
in naiverTicketautomat -> Ticketautomat -> preisAusgeben

2.42
in naiverTicketautomat -> TicketautomatStarter -> execute2_42
unterschiedlicher Betrag, da unteschiedliche Instanzen

2.43
in naiverTicketautomat -> Ticketautomat -> zusätzlicher Konstruktor
Parameter muss nicht mitgegeben werden -> Preis standardmässig 1000 Cent
kann geändert werden mit setzePreis

2.44
Test wurde nicht gemacht

2.45
in naiverTicketautomat -> Ticketautomat -> leeren
keine Paramteter nötig, verändernde Methode

2.46
in bessererTicketautomat -> TicketautomatStarter -> execute2_46

2.47
Meldung erscheint nicht wenn man 0 Cent einwirft... sowieso unrealistisch

2.48
im Kommentar in bessererTicketautomat -> Ticketautomat -> geldEinwerfen

2.49
z.B sichtbarkeit und ja war angemessen mit nur zwei Werten

2.50
Unterschied liegt im praktischen darin, nicht zuviel bezahlt werden kann und weiterhin guthaben bestehen bleibt.

2.51
Ja ist möglich, dadurch erhält der User aber keine Informationen mehr wieso er kein Ticket erhält.

2.52
Nein, if (bisherGezahlt >= preis) verhindert das.

2.53
Seite 626m BlueJ

2.54
int ersparnis = preis * rabatt;

2.55
int durchschnitt = gesamt / anzahl;

2.56
if (preis > budget){
  System.out.println("zu teuer");
} else {
  System.out.println("passt");
}

2.57
if (preis > budget){
  System.out.println("zu teuer, Budget ist " + budget);
} else {
  System.out.println("passt");
}

2.58
bisherGezahlt wird zurückgesetzt, das zu viel gezahlte Geld geht verloren

2.59
bisherGezahlt wird nicht mehr auf 0 gesetzt, da das return-Statement vor dem reset kommt
nach return darf nichts mehr gemacht werden -> kompiliert nicht

2.60
Variable preis ist nur innerhalb des Konstruktors verfügbar -> ticketpreis geht verloren
um Instanzvariabel zu nutzen anstatt "int preis" nur "preis" oder "this.preis" schreiben

2.61
siehe bessererTicketautomat -> Ticketautomat -> entleeren

2.62
public void ticketDrucken() {
  int nochZuZahlen = preis - bisherGezahlt;
  if (nochZuZahlen <= 0) {
    // Den Ausdruck eines Tickets simulieren.
    System.out.println("##################");
    System.out.println("# Die BlueJ-Linie");
    System.out.println("# Ticket");
    System.out.println("# " + preis + " Cent.");
    System.out.println("##################\n");

    // Die Gesamtsumme um den Ticketpreis erhöhen.
    gesamtsumme = gesamtsumme + preis;
    // Den Preis von der bisherigen Bezahlung abziehen.
    bisherGezahlt = bisherGezahlt - preis;
  } else {
    System.out.println("Sie müssen noch mindestens " +
            nochZuZahlen +
            " Cent einwerfen.");
  }
}

2.63
zusätzliches Feld für Rabatt-Betrag
neue Methode zum Rabatt setzen
neue Methode die Preis unter Berücksichtigung vom Rabatt angibt
überall wo auf preis zugegriffen wird Methode aufrufen (obige Mehtode)
siehe 2_63 -> bessererTicketautomat -> Ticketautomat

2.64
Name = gibName
Ergebnistyp = String

2.65
Name Methode = setzeKreditrahmen
Name Parameter = rahmen
Typ Parameter = int

2.66
public class Person{}

2.67
private String name;
private int alter;
private String nummer;
private int kreditrahmen

2.68
public Modul(String modulnummer) {
  nummer = modulnummer;
}

2.69
public Person(String meinName, int meinAlter) {
  name = meinName;
  alter = meinAlter;
}

2.70
public int gibAlter() {
  return alter;
}

2.71
public String gibName() {
  return name;
}

2.72
public void setzeAlter(int alter) {
  this.alter = alter;
}

2.73
public Person {
  private String name;

  public void detailsAusgeben() {
    System.out.println("Der Name der Person ist " + name);
  }
}

2.74
student_1:Student
name: Benjamin Jonson
matrikelnr: 738321

2.75
Henr557

2.76
IndexOutOfBoundsExeption
zu wenig zeichen für Substring

2.77
public Student(String vollerName, String matNr) {
  if(name.lenght() < 4) {
    System.out.println("Name zu kurz");
  }
  if (matNr < 3) {
    System.out.println("Matrikelnummer zu kurz");
  }
  name = vollerName;
  matrikelnummer = matNr;
}

2.78
public String gibLoginName() {
  String shortName = name.length() < 4 ? name : name.substring(0, 4);
  String matNr = matrikelnummer.lenght() < 3 ? matrikelnummer : matrikelnummer.substring(0, 3);
  return shortname + matNr;
}

2.79
102
"Seewolf"
"See9"
"93See"
"See39"
"w"
Fehler -> IndexOutOfBounds

2.80
Fehler, da Semikolon fehlt -> kompiliert bei mir ohne Direkteingabe gar nicht erst

2.81
t2.gibBisherGezahltenBetrag ist kein korrekter Methodenaufruf -> Fehler

2.82
t1.geldEinwerfen(500) erhöht bisherGezahlten Betrag um 500
t2.gibBisherBezahltenBetrag fehlt das Semikolon -> Fehler
-> mit Semikolon würde aber 500 zurückkommen, da t1 und t2 auf die gleichen Daten verweisen.

2.83 - 2.85
siehe buchAufgabe

2.86
unveränderlich, da Wert bei Konstruktion fix mitgegeben wird.

2.87 - 2.92
siehe buchAufgabe

2.93
siehe heizungsaufgabe